// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "openapi": "3.0.0",
    "info": {
        "title": "Delivery Tracking API",
        "description": "This API allows the management and tracking of delivery orders including placing orders, changing addresses, and checking order states.",
        "version": "1.0.0"
    },
    "paths": {
        "/producer/place": {
            "post": {
                "summary": "Place a new order",
                "description": "Create a new order by providing the necessary order details.",
                "tags": ["producer"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order placed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, order not created"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/producer/pending": {
            "get": {
                "summary": "Get all pending orders",
                "description": "Retrieve a list of orders that are pending delivery",
                "operationId": "getPendingOrders",
                "tags": ["producer"],
                "responses": {
                    "200": {
                        "description": "List of pending orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/producer/delivered": {
            "get": {
                "summary": "Get all delivered orders",
                "description": "Retrieve a list of orders that have been delivered.",
                "operationId": "getDeliveredOrders",
                "tags": ["producer"],
                "responses": {
                    "200": {
                        "description": "List of delivered orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/producer/changeState": {
            "get": {
                "summary": "Change the state of an order",
                "description": "Change the state of an order (e.g., from pending to delivered).",
                "operationId": "changeOrderState",
                "tags": ["producer"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The unique identifier of the order"
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["pending", "shipped", "out-for-delivery", "delivered"]
                        },
                        "description": "The new state to change the order to"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order state changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid state or orderId"
                    },
                    "404": {
                        "description": "Order not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/producer/changeAddress/{id}": {
            "post": {
                "summary": "Change the delivery address of an order",
                "description": "Update the delivery address of an existing order using the order's unique ID.",
                "operationId": "changeAddress",
                "tags": ["producer"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The unique identifier of the order"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Address"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input, unable to change address"
                    },
                    "404": {
                        "description": "Order not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Status": {
                "type": "object",
                "properties": {
                    "State": {
                        "type": "string"
                    },
                    "StatusDate": {
                        "type": "string"
                    }
                }
            },
            "Address": {
                "type": "object",
                "properties": {
                    "City": {
                        "type": "string"
                    },
                    "State": {
                        "type": "string"
                    },
                    "Pincode": {
                        "type": "integer"
                    }
                }
            },
            "Order": {
                "type": "object",
                "properties": {
                    "orderId": {
                        "type": "string"
                    },
                    "OrderDate": {
                        "type": "string"
                    },
                    "OrderTotal": {
                        "type": "number"
                    },
                    "Status": {
                        "type": "object",
                        "properties": {
                            "State": {
                                "type": "string"
                            },
                            "StatusDate": {
                                "type": "string"
                            }
                        }
                    },
                    "Address": {
                        "type": "object",
                        "properties": {
                            "City": {
                                "type": "string"
                            },
                            "State": {
                                "type": "string"
                            },
                            "Pincode": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/producer",
	Schemes:          []string{"http"},
	Title:            "Delivery Tracking API",
	Description:      "This API allows the management and tracking of delivery orders including placing orders, changing addresses, and checking order states.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
