// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\SARADHM\Downloads\practice\delivery-tracking-demo\Delivery_Tracking_API\producer\controller\Icontroller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderControllerInterface is a mock of OrderControllerInterface interface.
type MockOrderControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderControllerInterfaceMockRecorder
}

// MockOrderControllerInterfaceMockRecorder is the mock recorder for MockOrderControllerInterface.
type MockOrderControllerInterfaceMockRecorder struct {
	mock *MockOrderControllerInterface
}

// NewMockOrderControllerInterface creates a new mock instance.
func NewMockOrderControllerInterface(ctrl *gomock.Controller) *MockOrderControllerInterface {
	mock := &MockOrderControllerInterface{ctrl: ctrl}
	mock.recorder = &MockOrderControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderControllerInterface) EXPECT() *MockOrderControllerInterfaceMockRecorder {
	return m.recorder
}

// ChangeAddress mocks base method.
func (m *MockOrderControllerInterface) ChangeAddress(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeAddress", c)
}

// ChangeAddress indicates an expected call of ChangeAddress.
func (mr *MockOrderControllerInterfaceMockRecorder) ChangeAddress(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAddress", reflect.TypeOf((*MockOrderControllerInterface)(nil).ChangeAddress), c)
}

// ChangeState mocks base method.
func (m *MockOrderControllerInterface) ChangeState(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeState", c)
}

// ChangeState indicates an expected call of ChangeState.
func (mr *MockOrderControllerInterfaceMockRecorder) ChangeState(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeState", reflect.TypeOf((*MockOrderControllerInterface)(nil).ChangeState), c)
}

// GetDeliveredOrders mocks base method.
func (m *MockOrderControllerInterface) GetDeliveredOrders(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDeliveredOrders", c)
}

// GetDeliveredOrders indicates an expected call of GetDeliveredOrders.
func (mr *MockOrderControllerInterfaceMockRecorder) GetDeliveredOrders(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveredOrders", reflect.TypeOf((*MockOrderControllerInterface)(nil).GetDeliveredOrders), c)
}

// GetPendingOrders mocks base method.
func (m *MockOrderControllerInterface) GetPendingOrders(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPendingOrders", c)
}

// GetPendingOrders indicates an expected call of GetPendingOrders.
func (mr *MockOrderControllerInterfaceMockRecorder) GetPendingOrders(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingOrders", reflect.TypeOf((*MockOrderControllerInterface)(nil).GetPendingOrders), c)
}

// PlaceOrder mocks base method.
func (m *MockOrderControllerInterface) PlaceOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PlaceOrder", c)
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockOrderControllerInterfaceMockRecorder) PlaceOrder(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockOrderControllerInterface)(nil).PlaceOrder), c)
}
